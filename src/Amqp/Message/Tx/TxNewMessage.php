<?php
namespace Amqp\Message\Tx;

use App\Amqp\Message;

/**
 * @api {POST} chat,sms,yandex 1. Report a transaction
 * @apiGroup Tx
 * @apiName new
 * @apiDescription
 * Published when a fiat or crypto tx has happened.
 *
 * @apiHeader (Actions) [app]     Save to db, match with invoice/bill. Publish invoice.tx on match.
 *
 * @apiParam (Body)     {string}        state=NEW       Always "NEW".
 * @apiParam (Body)     {string}        type=ORDER      ORDER is tx for a trade.
 *                                                      CASH is withdrawal that may be credited to other nostro.
 *                                                      SPEND is a tx not relevant to a trade (only outgoing).
 * @apiParam (Body)     {bool}          is_out          True if money sent, false if received.
 * @apiParam (Body)     {string}        method          One of supported payment methods.
 * @apiParam (Body)     {float}         amount          Amount delivered (without fees).
 * @apiParam (Body)     {float}         [fee]           Numeric amount of fee, if any. 0 if not set.
 * @apiParam (Body)     {float}         [balance]       Nostro balance after tx if known.
 * @apiParam (Body)     {array}         [partner]       Free form information about payment counterparty.
 * @apiParam (Body)     {string}        [refid]         Unique identifier generated by platform, if any.
 * @apiParam (Body)     {int}           [nostro_id]     ID from app's database. One of nostro_id, order_id or trade_id must present.
 * @apiParam (Body)     {int}           [order_id]      ID from app's database. Used when reply to Order. Outgoing txs only.
 * @apiParam (Body)     {string{13}}    [trade_id]      May be set if there is no tracked nostro involved or its ID is unknown.
 * @apiParam (Body)     {array}         [extra]         Free form information about payment.
 *
 * @apiSuccessExample {json} Example
 *  {
     "state": "NEW",
     "type": "ORDER",
     "is_out": false,
     "nostro_id": 12,
     "method": "YANDEX",
     "amount": 100.00,
     "fee": 0.50,
     "partner": {"login": "1234567890"}
    }
 *
 * @property float $fee
 * @property float $balance
 * @property int $nostro_id
 * @property int $order_id
 * @property string $trade_id
 * @property string $refid
 * @property array $partner
 * @property array $extra
 */
class TxNewMessage extends Message
{
    const TYPE_ORDER = 'ORDER';
    const TYPE_CASH = 'CASH';
    const TYPE_SPEND = 'SPEND';

    public string $state = 'NEW';
    public string $type  = self::TYPE_ORDER;
    public bool $is_out;
    public $method;
    public $amount;

    public function isValid($value = null)
    {
        $value ??= $this;

        $this->errorMessages = [];

        $required = ['state', 'type', 'is_out', 'method', 'amount'];
        foreach ($required as $prop) {
            if (!isset($value->$prop)) {
                $this->errorMessages["empty_$prop"] = "$prop is not set.";
                return false; // now to avoid method calls on null
            }
        }
        if ($value->state != 'NEW') {
            $this->errorMessages['invalid_state'] = 'State must NEW.';
        }
        if (!in_array($value->type, [self::TYPE_SPEND, self::TYPE_ORDER, self::TYPE_CASH])) {
            $this->errorMessages['invalid_type'] = "Invalid type: {$value->type}";
        }
        if (!isset($value->trade_id) && !isset($value->nostro_id) && !isset($value->order_id)) {
            $this->errorMessages['missing_trade'] = "One of trade_id, nostro_id or order_id must present.";
        }
        if (!is_numeric($value->amount) || $value->amount <= 0) {
            $this->errorMessages['invalid_amount'] = "Amount must be a positive float. Got: {$value->amount}";
        }

        return empty($this->errorMessages);
    }
}
