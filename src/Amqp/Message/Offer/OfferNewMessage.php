<?php
namespace Amqp\Message\Offer;

use Amqp\Message\Ad\AdNewMessage;
use App\Amqp\Message\Entity\Client;
use Amqp\Message\Hydrator\MessageHydrator;

/**
 * @api {AMQP} offer.new  1. Offer is published
 * @apiGroup Offer
 * @apiName event-offer-new
 * @apiSampleRequest off
 * @apiDescription
 * P2P market is constantly monitored for deals other people offer.
 * Each found offer is published as this message so that good offers can be taken quickly.
 *
 * @apiHeader (Subscribers) [app]     If offer is good enough open trade for this offer.
 * @apiHeader (Subscribers) [lbtc]    Save to db to haggle for better price.
 *
 * @apiParam (Body)     {int}       uuid            Generated by salepoint.
 * @apiParam (Body)     {string}    way             "bid" is when we are buying and user is selling, "ask" otherwise.
 * @apiParam (Body)     {string}    symbol          Crypto-fiat pair in ad. Ex: "btcusd"
 * @apiParam (Body)     {string}    method          One of supported payment methods.
 * @apiParam (Body)     {float}     rate            Exchange rate in offer without salepoint fees.
 * @apiParam (Body)     {string}    refid           Unique ad identifier on the platform.
 * @apiParam (Body)     {Client}    offeror         Structured information about ad owner.
 * @apiParam (Body)     {string}    [country]       ISO-2 code. Advertise only in this country, if set.
 * @apiParam (Body)     {int}       [minFiat]       Minimum trade amount.
 * @apiParam (Body)     {int}       [maxFiat]       Maximum trade amount.
 * @apiParam (Body)     {string}    [title]         Ad title visible to clients.
 * @apiParam (Body)     {string}    [terms]         Ad terms visible to clients.
 * @apiParam (Body)     {bool}      [kycRequired]   If true, offeror requires client to be verified on platform.
 * @apiParam (Body)     {array}     [extra]         Raw API data for this offer.
 *
 * @property array $extra
 */
class OfferNewMessage extends AdNewMessage
{
    public string $refid;
    public Client $offeror;

    public function isValid($value = null)
    {
        $value ??= $this;
        $this->errorMessages = [];

        if (!parent::isValid($value)) return false;

        $required = ['refid', 'offeror'];
        foreach ($required as $prop) {
            if (!isset($value->$prop)) {
                $this->errorMessages["empty_$prop"] = "$prop is not set.";
                return false; // now to avoid method calls on null
            }
        }

        $childs = ['offeror'];
        foreach ($childs as $prop) {
            $child = $this->$prop;
            if (!$child->isValid()) {
                $this->errorMessages += $child->getMessages();
            }
        }

        return empty($this->errorMessages);
    }

    public function getHydrator() : MessageHydrator
    {
        if (!isset($this->hydrator)) {
            $hydrator = parent::getHydrator();
            $hydrator->addStrategy('offeror',    new Client());
        }
        return $this->hydrator;
    }
}
